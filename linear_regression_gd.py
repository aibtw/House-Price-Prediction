import numpy as np
from numpy import random as rnd
from matplotlib import pyplot as plt


def main():
    num_of_features = 1
    comp = np.array([-5., 3.])

    """Real equation (Arbitrary example)"""
    x = np.arange(-10, 10, 0.1)
    (x_m, x_n) = np.asmatrix(x).shape  # The dimensions of x are m rows by n columns
    y = 3 * x - 5 + (2 * rnd.random(x_n))  # Theta 0 = -5. Theta 1 = 3.

    """Theta random start point.   Thetas = [Th0, Th1, Th2 ...]"""
    thetas = rnd.random(num_of_features + 1)

    """Learning rate"""
    lr = 0.005

    """Loss"""
    loss = list()

    """ trainX = [1 , 1,  1  ... ] <--- To be multiplied by Theta0
                 [x1, x2, x3 ... ] <--- Feature 1
                 [v1, v2, v3 ... ] <--- Feature 2
    """
    trainX = np.array([np.ones(x_n), x])

    """ trainY = [Y1 , Y2,  Y3  ... ] """
    trainY = y

    """Main loop"""
    for i in range(5000):
        """ hypothesis hyp = [h1 , h2,  h3  ... ]. (This is the guess generated by current value of theta)"""
        hyp = np.dot(thetas, trainX)

        """Calculate loss"""
        loss.append(np.sum((hyp - trainY) ** 2) / x_n)
        # print(loss)

        """Update function = trainX * loss function"""
        Grad = np.dot(trainX, (hyp - trainY).reshape(x_n, x_m) / x_n)
        thetas = thetas - lr * Grad.reshape(1, thetas.size)
        print(thetas)

        if(thetas - comp < [10e-11, 10e-11]).all():
            print(i)
            print(loss[i])
            break

    #     plt.plot(loss)
    #     plt.pause(0.05)
    #
    # print(loss)
    # plt.show()


if __name__ == "__main__":
    main()
